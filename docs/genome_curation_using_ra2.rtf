{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww15180\viewh15660\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf0 \expnd0\expndtw0\kerning0
\ul \ulc0 curate genome using ra2.py:
\b0 \ulnone \
\
\pard\pardeftab720\partightenfactor0

\b \cf0 recommended usage:
\b0 \'a0\

\b $ ra2.py\'a0-i <genome.fa> -1\'a0<forward_reads.fq> -2\'a0<reverse_reads.fq> --add-Ns
\b0 \
\
* If doing additional curation afterwards, you may want to use --extend to extend the ends of scaffolds. However, since this can introduce redundancy, it is best not to use this unless doing additional curation to combine scaffolds with overlapping ends.\'a0\
\
* Reads may be gzipped.\'a0\
\
* See `$ ra2.py -h` for more info.\
\
\pard\pardeftab720\partightenfactor0

\b \cf0 \ul output will be in <genome>.curated directory:\'a0
\b0 \ulnone \
\
* re_assembled.fa: curated genome\
\
* re_assembled.report.txt: report (e = extended, n = error that was not fixed, f = error that was fixed, b = scaffold broken at error)\
\

\b \ul clean up ra2.py output:
\b0 \ulnone \
\pard\pardeftab720\partightenfactor0

\b \cf0 \
\pard\pardeftab720\partightenfactor0

\b0 \cf0 * ra2.py produces fasta files with headers that are not compatible with some downstream applications.\
\
\pard\pardeftab720\partightenfactor0

\b \cf0 clean fasta file:\'a0
\b0 \

\b $ fix_fasta.py <genome.curated/re_assembled.fa> |\'a0nr_fasta.py rename - > <genome.curated.fa>
\b0 \
\
\pard\pardeftab720\partightenfactor0

\b \cf0 \ul filter mapping to look at stringently mapped reads:
\b0 \ulnone \
\pard\pardeftab720\partightenfactor0

\b \cf0 \
\pard\pardeftab720\partightenfactor0

\b0 \cf0 * After running ra2.py you should re-map the reads to the genome sequence for visual inspection. Often it is helpful to remove poorly mapped reads from the mapping file.\
\
\pard\pardeftab720\partightenfactor0

\b \cf0 filter mapping with same criteria used by ra2.py:\'a0
\b0 \

\b $ mapped.py\'a0-s <mapping.sam> -m 1 -p both -o <filtered_mapping.mm1-both.sam>
\b0 \
\
* This command allows for one mismatch in the read mapping. The \'93-p\'94 option has to do with whether or not the mismatch requirement applies to one or both reads in a pair. In this case the requirement apples to both reads, unless one of the reads did not map.\
\
* See `mapped.py\'a0-h` for more info.\
\
\pard\pardeftab720\partightenfactor0

\b \cf0 \ul collect mapped reads:
\b0 \ulnone \
\
* For manual curation it is helpful to have all of the mapped reads.\
\
\pard\pardeftab720\partightenfactor0

\b \cf0 get reads:
\b0 \

\b $ mapped.py -m False -p one -s <mapping.sam> -r > <mapped_reads.pe.fastq> 2><mapped_reads.se.fastq>
\b0 \
\
\pard\pardeftab720\partightenfactor0

\b \cf0 \ul Notes:
\b0 \ulnone \
\
* ra2.py saves mapped reads to memory and therefore can use a lot of memory when curating very large assemblies. I have had no problem running this on a single or even several genomes at one time. However, it should not be used on a metagenome assembly.\
\
* Because this method relies on stringently mapped reads to identify assembly errors, low coverage genomes (<5x) may have an excessive number of predicted errors (i.e. false positives). In these cases, it may be better to not use the --add-Ns option and instead leave un-corrected errors as they originally were. This may also be the case for higher coverage genomes that have a lot of strain variation.}